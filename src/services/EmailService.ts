import { getCompanyConfig } from '../config/companyConfig';


interface EmailData {
  to: string;
  subject: string;
  content: string;
  senderName?: string;
  attachment?: {
    name: string;
    data: string; // Base64 encoded data
    type: string; // MIME type
  };
}

export interface UserInfo {
  name: string;
  email: string;
  phoneNumber?: string;
  sector?: string;
  position?: string;
  ambitions?: string;
  timestamp?: string;
}

interface EmailResponse {
  success: boolean;
  messageId?: string;
  error?: string;
}

/**
 * Service d'email simple avec EmailJS
 */
export class EmailService {

  /**
   * Envoie un email simple
   */
  static async sendEmail(emailData: EmailData): Promise<EmailResponse> {
    try {
      // Validation des donn√©es
      if (!emailData.to || !this.validateEmail(emailData.to)) {
        throw new Error('Adresse email invalide');
      }

      if (!emailData.subject || !emailData.content) {
        throw new Error('Sujet et contenu requis');
      }

      // Choisir la m√©thode d'envoi selon la pr√©sence de pi√®ce jointe
      if (emailData.attachment) {
        return await this.tryEmailJSWithAttachment(emailData);
      } else {
        return await this.tryEmailJS(emailData);
      }

    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur lors de l\'envoi de l\'email'
      };
    }
  }

  /**
   * Envoi via EmailJS avec pi√®ce jointe (utilise template avec base64 int√©gr√©)
   */
  private static async tryEmailJSWithAttachment(emailData: EmailData): Promise<EmailResponse> {
    try {
      const serviceId = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID;
      const templateId = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_PDF_ID || process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID;
      const publicKey = process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY;

      if (!serviceId || !templateId || !publicKey) {
        return { success: false, error: 'EmailJS non configur√©' };
      }

      const companyConfig = getCompanyConfig();

      const templateParams: any = {
        to_email: emailData.to,
        to_name: emailData.senderName || 'Client',
        subject: emailData.subject,
        message: emailData.content,
        from_name: companyConfig.name,
        reply_to: companyConfig.email,
        company_name: companyConfig.name,
        company_website: companyConfig.website
      };

      // Ajouter les informations de pi√®ce jointe pour le template
      if (emailData.attachment) {
        templateParams.attachment_name = emailData.attachment.name;
        templateParams.attachment_type = emailData.attachment.type;
        templateParams.attachment_size = Math.round(emailData.attachment.data.length * 0.75 / 1024); // Taille approximative en KB
        templateParams.has_attachment = 'true';

        // Pour les petits PDF (< 1MB), inclure le base64 dans le template
        if (emailData.attachment.data.length < 1000000) {
          templateParams.attachment_data = emailData.attachment.data;
        } else {
          templateParams.attachment_data = 'PDF trop volumineux pour √™tre joint';
        }
      } else {
        templateParams.has_attachment = 'false';
      }

      const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          service_id: serviceId,
          template_id: templateId,
          user_id: publicKey,
          template_params: templateParams
        })
      });

      if (!response.ok) {
        // Si l'API avec pi√®ce jointe √©choue, essayer sans pi√®ce jointe
        console.warn('√âchec envoi avec pi√®ce jointe, tentative sans pi√®ce jointe...');
        return await this.tryEmailJS(emailData);
      }

      const result = await response.text();

      return {
        success: true,
        messageId: result || `emailjs_${Date.now()}`
      };

    } catch (error) {
      console.warn('Erreur envoi avec pi√®ce jointe:', error);
      // Fallback: essayer sans pi√®ce jointe
      return await this.tryEmailJS(emailData);
    }
  }

  /**
   * Envoi via EmailJS avec configuration s√©curis√©e Next.js (sans pi√®ce jointe)
   */
  private static async tryEmailJS(emailData: EmailData): Promise<EmailResponse> {
    try {
      const serviceId = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID;
      const templateId = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID;
      const publicKey = process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY;

      if (!serviceId || !templateId || !publicKey) {
        return { success: false, error: 'EmailJS non configur√©' };
      }

      const companyConfig = getCompanyConfig();

      const templateParams: any = {
        to_email: emailData.to,
        to_name: emailData.senderName || 'Client',
        subject: emailData.subject,
        message: emailData.content,
        from_name: companyConfig.name,
        reply_to: companyConfig.email,
        company_name: companyConfig.name,
        company_website: companyConfig.website
      };

      const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          service_id: serviceId,
          template_id: templateId,
          user_id: publicKey,
          template_params: templateParams
        })
      });

      if (!response.ok) {
        throw new Error(`Erreur ${response.status}`);
      }

      const result = await response.text();

      return {
        success: true,
        messageId: result || `emailjs_${Date.now()}`
      };

    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur EmailJS'
      };
    }
  }



  /**
   * Envoie un email avec un PDF (avec lien de t√©l√©chargement int√©gr√©)
   */
  static async sendEmailWithPdf(
    email: string,
    name: string,
    pdfBlob: Blob,
    filename: string,
    userInfo?: UserInfo
  ): Promise<EmailResponse> {
    try {
      const companyConfig = getCompanyConfig();

      // Cr√©er un lien de t√©l√©chargement temporaire pour le PDF
      const pdfUrl = URL.createObjectURL(pdfBlob);
      const downloadLink = `${window.location.origin}#pdf-download`;

      const emailData: EmailData = {
        to: email,
        subject: `üöÄ Votre Portrait Pr√©dictif IA - ${name} | ${companyConfig.name}`,
        content: this.generatePdfEmailContentWithLink(name, filename, downloadLink),
        senderName: name
      };

      // Essayer d'abord avec pi√®ce jointe
      const pdfBase64 = await this.blobToBase64(pdfBlob);
      emailData.attachment = {
        name: filename,
        data: pdfBase64,
        type: 'application/pdf'
      };

      // Envoyer l'email
      const result = await this.sendEmail(emailData);

      // Envoyer aussi une notification √† la soci√©t√© (sans PDF pour √©viter la surcharge)
      if (result.success) {
        const companyEmailData: EmailData = {
          to: 'amineabdelkafi839@gmail.com',
          subject: `üîî Nouveau Portrait IA g√©n√©r√© avec PDF - ${name}`,
          content: this.generateCompanyNotificationContent(name, email, userInfo),
          senderName: 'Syst√®me MS360'
        };

        // Envoi en arri√®re-plan avec logging des erreurs
        this.sendEmail(companyEmailData).catch((error) => {
          console.error('‚ùå Erreur envoi notification soci√©t√©:', error);
          // Essayer un envoi de fallback simplifi√©
          this.sendSimpleCompanyNotification(name, email).catch(() => {
            console.error('‚ùå √âchec total notification soci√©t√©');
          });
        });
      }

      return result;

    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur lors de l\'envoi de l\'email avec PDF'
      };
    }
  }

  /**
   * Envoie un email de bienvenue √† l'utilisateur ET une notification √† la soci√©t√©
   */
  static async sendWelcomeEmail(email: string, name: string, userInfo?: UserInfo): Promise<EmailResponse> {
    try {
      const companyConfig = getCompanyConfig();

      // Email √† l'utilisateur
      const userEmailData: EmailData = {
        to: email,
        subject: `üöÄ Votre Portrait Pr√©dictif IA est pr√™t - ${name} | ${companyConfig.name}`,
        content: this.generateWelcomeContent(name),
        senderName: name
      };

      // Email de notification √† la soci√©t√©
      const companyEmailData: EmailData = {
        to: 'amineabdelkafi839@gmail.com',
        subject: `üîî Nouveau Portrait IA g√©n√©r√© - ${name}`,
        content: this.generateCompanyNotificationContent(name, email, userInfo),
        senderName: 'Syst√®me MS360'
      };

      // Envoi des deux emails en parall√®le
      const [userResult, companyResult] = await Promise.allSettled([
        this.sendEmail(userEmailData),
        this.sendEmail(companyEmailData)
      ]);

      // Retourner le r√©sultat de l'email utilisateur (prioritaire)
      const userResponse = userResult.status === 'fulfilled' ? userResult.value : { success: false, error: '√âchec envoi utilisateur' };

      return userResponse;

    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur lors de l\'envoi des emails'
      };
    }
  }

  /**
   * Convertit un Blob en base64
   */
  private static async blobToBase64(blob: Blob): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const result = reader.result as string;
        // Retirer le pr√©fixe "data:application/pdf;base64," si pr√©sent
        const base64 = result.includes(',') ? result.split(',')[1] : result;
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }

  /**
   * G√©n√®re le contenu d'email pour l'envoi avec PDF et lien
   */
  private static generatePdfEmailContentWithLink(name: string, filename: string, downloadLink: string): string {
    const companyConfig = getCompanyConfig();

    return `üéâ F√©licitations ${name} !

Votre Portrait Pr√©dictif IA a √©t√© g√©n√©r√© avec succ√®s !

üìé VOTRE RAPPORT PDF : ${filename}
Votre rapport personnalis√© est joint √† cet email. Si vous ne voyez pas la pi√®ce jointe, vous pouvez √©galement le t√©l√©charger depuis notre plateforme.

üìä VOTRE RAPPORT CONTIENT :
‚Ä¢ Analyse personnalis√©e de votre profil professionnel
‚Ä¢ Recommandations strat√©giques adapt√©es √† votre secteur
‚Ä¢ Vision prospective sur 3 ans
‚Ä¢ Plan d'action concret et r√©alisable

üöÄ PROCHAINES √âTAPES :
1. T√©l√©chargez et consultez votre rapport PDF ci-joint
2. Identifiez les opportunit√©s prioritaires
3. Mettez en ≈ìuvre les recommandations
4. Suivez votre progression

üíº BESOIN D'ACCOMPAGNEMENT ?
Notre √©quipe d'experts reste √† votre disposition pour vous accompagner dans la mise en ≈ìuvre de votre strat√©gie.

üìû CONTACT :
Email : ${companyConfig.email}
T√©l√©phone : ${companyConfig.phone}
Site web : ${companyConfig.website}

---
${companyConfig.tagline}`;
  }

  /**
   * G√©n√®re le contenu d'email pour l'envoi avec PDF
   */
  private static generatePdfEmailContent(name: string): string {
    const companyConfig = getCompanyConfig();

    return `üéâ F√©licitations ${name} !

Votre Portrait Pr√©dictif IA a √©t√© g√©n√©r√© avec succ√®s et vous trouverez votre rapport personnalis√© en pi√®ce jointe de cet email.

üìä VOTRE RAPPORT PDF CONTIENT :
‚Ä¢ Analyse personnalis√©e de votre profil professionnel
‚Ä¢ Recommandations strat√©giques adapt√©es √† votre secteur
‚Ä¢ Vision prospective sur 3 ans
‚Ä¢ Plan d'action concret et r√©alisable

üöÄ PROCHAINES √âTAPES :
1. T√©l√©chargez et consultez votre rapport PDF ci-joint
2. Identifiez les opportunit√©s prioritaires
3. Mettez en ≈ìuvre les recommandations
4. Suivez votre progression

üíº BESOIN D'ACCOMPAGNEMENT ?
Notre √©quipe d'experts reste √† votre disposition pour vous accompagner dans la mise en ≈ìuvre de votre strat√©gie.

üìû CONTACT :
Email : ${companyConfig.email}
T√©l√©phone : ${companyConfig.phone}
Site web : ${companyConfig.website}

---
${companyConfig.tagline}`;
  }

  /**
   * G√©n√®re le contenu de l'email de bienvenue
   */
  private static generateWelcomeContent(name: string): string {
    const companyConfig = getCompanyConfig();

    return `Bonjour ${name},

F√©licitations ! Votre Portrait Pr√©dictif IA personnalis√© a √©t√© g√©n√©r√© avec succ√®s par ${companyConfig.name}.

Ce rapport contient :
‚Ä¢ Une analyse approfondie de votre profil professionnel
‚Ä¢ Des pr√©dictions IA pour les 3 prochaines ann√©es (2025-2027)
‚Ä¢ Des recommandations strat√©giques personnalis√©es
‚Ä¢ Un plan d'action concret et actionnable
‚Ä¢ Des opportunit√©s de croissance sp√©cifiques √† votre secteur

Pour t√©l√©charger votre rapport PDF, retournez sur notre site web et cliquez sur le bouton "T√©l√©charger le PDF".

Nous vous souhaitons beaucoup de succ√®s dans la r√©alisation de vos ambitions professionnelles !

Pour toute question, n'h√©sitez pas √† nous contacter √† ${companyConfig.email}

Cordialement,
L'√©quipe ${companyConfig.name}
${companyConfig.website}

---
${companyConfig.tagline}`;
  }

  /**
   * G√©n√®re le contenu de notification pour la soci√©t√©
   */
  private static generateCompanyNotificationContent(name: string, email: string, userInfo?: UserInfo): string {
    const timestamp = new Date().toLocaleString('fr-FR', {
      timeZone: 'Europe/Paris',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });

    return `üîî NOUVELLE UTILISATION DU SERVICE PORTRAIT IA

    üìÖ Date et heure : ${timestamp}

    üë§ INFORMATIONS CLIENT :
    ‚Ä¢ Nom complet : ${name}
    ‚Ä¢ Email professionnel : ${email}
    ‚Ä¢ Num√©ro de t√©l√©phone : ${userInfo?.phoneNumber || 'Non renseign√©'}
    ‚Ä¢ Secteur d'activit√© : ${userInfo?.sector || 'Non renseign√©'}
    ‚Ä¢ Poste actuel : ${userInfo?.position || 'Non renseign√©'}

    üíº VISION STRAT√âGIQUE :
    ‚Ä¢ Ambitions √† 3 ans : ${userInfo?.ambitions || 'Non renseign√©es'}

    üìä STATUT :
    ‚Ä¢ Portrait IA g√©n√©r√© avec succ√®s
    ‚Ä¢ Email de confirmation envoy√© au client
    ‚Ä¢ PDF disponible pour t√©l√©chargement

    ---
    Notification automatique du syst√®me MS360
    Pour toute question, contactez l'√©quipe technique.`;
  }



  /**
   * Envoi simplifi√© de notification √† la soci√©t√© (fallback)
   */
  private static async sendSimpleCompanyNotification(userName: string, userEmail: string): Promise<EmailResponse> {
    try {
      const simpleEmailData: EmailData = {
        to: 'amineabdelkafi839@gmail.com',
        subject: `üîî Nouveau client - ${userName}`,
        content: `Nouveau Portrait IA g√©n√©r√© pour:\n\nNom: ${userName}\nEmail: ${userEmail}\nDate: ${new Date().toLocaleString('fr-FR')}\n\n--\nSyst√®me MS360`,
        senderName: 'MS360 System'
      };

      return await this.sendEmail(simpleEmailData);
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur notification simple'
      };
    }
  }

  /**
   * Valide une adresse email
   */
  static validateEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * Nettoie et formate une adresse email
   */
  static sanitizeEmail(email: string): string {
    return email.trim().toLowerCase();
  }

}
